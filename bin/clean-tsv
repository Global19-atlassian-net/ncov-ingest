#!/usr/bin/env python3
import pandas as pd
import argparse
import csv

def clean_tsv_file(file_name, output_file, n_cols, header, sort_col):
    """
    1. Read the tsv file
    2. Sort alphabetically and make sure n columns (n-1 tabs) each row (if n_cols is passed)
    3. Write out tsv file
    """
    if n_cols:
        # if --n-cols is passed, read in and back out to assert n columns
        data = pd.read_csv(file_name,
                               sep="\t",
                               header=None,
                               names=list(range(n_cols)), # overriding column names; this adds missing tabs when there are too few
                               usecols=list(range(n_cols))) # using first n only; this removes extra tabs
        data.to_csv(output_file, sep="\t", index=False, header=False, quoting=csv.QUOTE_NONE)
    data = pd.read_csv(file_name,
                           sep="\t",
                           header=0 if header else None)
    col_names = list(data.columns)
    if sort_col is not None:
        try:
            if not header:
                sort_col = int(sort_col)
            col_names.remove(sort_col)
        except ValueError as e:
            print(f"{sort_col} is not a column name in file, or if --no-header was used, there are not this many columns in the file.")
            raise e
        col_names = [sort_col] + col_names
    data = data.sort_values(col_names)
    data.to_csv(output_file, sep="\t", index=False, header=header, quoting=csv.QUOTE_NONE)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="""Sort tsv and clean tabs.""",
        formatter_class=argparse.RawTextHelpFormatter
    )

    parser.add_argument(
            "tsv",
            type=str,
            help="Path to file in TSV format to be cleaned and sorted.\n")

    parser.add_argument(
            "output_file",
            type=str,
            help="Path to write cleaned and sorted output TSV.\n")

    parser.add_argument(
            "--n-cols",
            type=int,
            help="Number of columns to enforce. Extra tabs will be added for rows with fewer than this number, and rows with more than this number will be truncated to this number of columns/tabs.\n")

    parser.add_argument(
            "--sort-col",
            type=str,
            help="A column name (or 0-based index for headerless tsvs) to prioritize sorting; if not used, sorting will be alphabetical by columns in the order they appear.`.\n")

    parser.add_argument(
            "--no-header",
            action='store_true',
            help="Do not read in the first line of the file as the column names.\n")

    args = parser.parse_args()
    clean_tsv_file(args.tsv, args.output_file, args.n_cols, not args.no_header, args.sort_col)
