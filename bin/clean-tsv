#!/usr/bin/env python3
import pandas as pd
import argparse
import csv

def clean_metadata_file(file_name, n_cols, header, sort_col):
    """
    1. Read the metadata TSV file
    2. Sort alphabetically and make sure n columns (n-1 tabs) each row
    3. Write out (overwrite) metadata file
    """
    if n_cols:
        # if --n-cols is passed, read in and back out to assert n columns
        metadata = pd.read_csv(file_name,
                               sep="\t",
                               header=None,
                               names=list(range(n_cols)), # overriding column names; this adds missing tabs when there are too few
                               usecols=list(range(n_cols))) # using first n only; this removes extra tabs
        metadata.to_csv(file_name, sep="\t", index=False, header=False, quoting=csv.QUOTE_NONE)
    metadata = pd.read_csv(file_name,
                           sep="\t",
                           header=0 if header else None)
    col_names = list(metadata.columns)
    if sort_col is not None:
        try:
            if not header:
                sort_col = int(sort_col)
            col_names.remove(sort_col)
        except ValueError as e:
            print(f"{sort_col} is not a column name in file, or if --header wasn't used, there are not this many columns in the file.")
            raise e
        col_names = [sort_col] + col_names
    metadata = metadata.sort_values(col_names)
    metadata.to_csv(file_name, sep="\t", index=False, header=header, quoting=csv.QUOTE_NONE)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="""Sort metadata tsv and clean tabs. 
        For files with a header, use --header and the number of columns in the header (and the header names) will be used.
        For files with no header, use --n-cols followed by the number of columns in the tsv.""",
        formatter_class=argparse.RawTextHelpFormatter
    )

    parser.add_argument(
            "metadata",
            help="Location metadata file (in TSV format) to be cleaned.\n")

    parser.add_argument(
            "--n-cols",
            type=int,
            help="Number of columns to enforce.\n")

    parser.add_argument(
            "--sort-col",
            type=str,
            help="A column name (or 0-based index for headerless tsvs) to prioritize sorting; if not used, sorting will be alphabetical by columns in the order they appear.`.\n")

    parser.add_argument(
            "--header",
            action='store_true',
            help="Respect a header in the file if set.\n")

    args = parser.parse_args()
    clean_metadata_file(args.metadata, args.n_cols, args.header, args.sort_col)
