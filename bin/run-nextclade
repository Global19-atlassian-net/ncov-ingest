#!/usr/bin/env bash

# HACK: Allows running nextclade on a large input fasta file:
#
#   - Splits fasta file into batches of a given size (Node.js is limited to max
#     GBytes file size)
#
#   - Runs batches one at a time. Nextclade uses a thread pool to schedule the
#     analysis of sequences in parallel, on per-sequence basis.
#
#   - Concatenates outputs from all batches
#
# TODO: This this script will be redundant when Nextclade implements a proper
#  streaming fasta reader, thus lifting the 2 GBytes limit. This will
#  effectively move batching inside Nextclade
#

set -o errexit
set -o nounset
set -o pipefail
trap "exit" INT

BATCH_SIZE=${1}
N_PROCESSES=${2}
INPUT_FASTA=${3}
OUTPUT_TSV=${4}
TMP_DIR_FASTA="tmp/fasta"
TMP_DIR_CLADES="tmp/clades"
INPUT_WILDCARD="${TMP_DIR_FASTA}/*.fasta"
OUTPUT_WILDCARD="${TMP_DIR_CLADES}/*.tsv"

# Split fasta file to multiple batches
mkdir -p "${TMP_DIR_FASTA}"
./bin/split-fasta \
  "${INPUT_FASTA}" \
  --batch_size=${BATCH_SIZE} \
  --output_dir="${TMP_DIR_FASTA}"

# Check if batches exist and report
if ls ${INPUT_WILDCARD} 1>/dev/null 2>&1; then
  NUM_BATCHES="$(ls -Ubad1 2>/dev/null -- ${INPUT_WILDCARD} | wc -l)"
  echo "There are ${NUM_BATCHES} batches of sequences to process with Nextclade (batch size is ${BATCH_SIZE})"
else
  echo "There are no new sequences to process. Skipping Nextclade step."
  rm -rf "${TMP_DIR_FASTA}"
  exit 0
fi

echo "nextclade version"
nextclade.js --version

# Run batches in parallel
echo "Using ${N_PROCESSES} parallel processes"
mkdir -p "${TMP_DIR_CLADES}"
for input in ${INPUT_WILDCARD}; do
  if [ ! -e "${input}" ]; then
    # If ${input} does not exist, this means that INPUT_WILDCARD was not expanded,
    # there are no batch files and we should not attempt to run the processing.
    # If we would, then it will crash.
    break
  fi

  input_basename="$(basename "${input}")"
  output_basename="${input_basename%.fasta}.tsv"
  output_filename="${TMP_DIR_CLADES}/${output_basename}"

  echo "Processing ${input}"
  nextclade.js \
    --jobs="${N_PROCESSES}" \
    --input-fasta="${input}" \
    --output-tsv="${output_filename}"
done

# Concatenate output batches together
for output in ${OUTPUT_WILDCARD}; do
  ./bin/join-rows $output "${OUTPUT_TSV}" -o "${OUTPUT_TSV}"
done

rm -r tmp
